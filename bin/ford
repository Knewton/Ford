#!/usr/bin/env python
from optparse import OptionParser
from os.path import abspath, isdir, basename
from os import chdir, getuid, getlogin, getcwd
from sys import exit, argv
from ford.utilities import mkdirp
from ford import utilities
from subprocess import call as subcall

from ford.project import (Project, upgrade, cdnimport, selfupdate,
	makecert, host, multihost, stophost, daemon_port, setting, srv_status,
	host_project, unhost_project)
from ford.project import JSONError, UpdateError
from ford.utilities import printr
from ford.utilities import print_event as pe

SUPPORTED_ACTIONS = ["import", "upgrade", "latest", "selfup", "mkcert"
	"init", "update", "build", "host", "unhost", "status", "start", "stop",
	"restart", "server", "ssl"]

def fail_server_check():
	print "You have sudo permissions but don't need them!"
	print "Please rerun this command WITHOUT sudo!"
	exit(1)

def fail_sudo_server_check():
	print "You are attempting to work with a root server."
	print "This requires permissions; please rerun with sudo!"
	exit(1)

def secure_port(port):
	return port >= 0 and port <= 1024

def check_port():
	if secure_port(daemon_port()):
		fail_sudo_server_check()

def not_running(invert=False):
	if invert:
		printr("[WEBHOST] Server is already running.", "red")
	else:
		printr("[WEBHOST] Server is not running.", "red")
	exit(1)

def optparse():
	desc="\n".join(["usage: %prog [options] action [directory]",
			"A development and build tool for javascript applications.",
			"",
			"Ford tool actions:",
			"    upgrade: Upgrades the current user's ford resources.",
			"             Use --force to overwrite existing resources.",
			"             Use --skip to skip import after upgrade.",
			"    import:  Pulls in all the packages hosted on CDNJS as ford",
			"             ready manifests for import. Use --force to update",
			"             the cached package listing from cdnjs.com",
			"             Must be run after upgrade (done automatically)",
			"    selfup:  Performs a self-update, getting the latest Ford.",
			"             Must be run as root.",
			"    latest:  Performs a selfup, upgrade, and import.",
			"             Requests sudo permission!",
			"             Use --force to overwrite existing resources.",
			"             Use --skip to skip import.",
			"    mkcert:  Generates a self-signed certificate using OpenSSL.",
			"",
			"Ford hosting actions:",
			"    status:  Checks the status of the Ford servers.",
			"     start:  Starts up both an SSL and unsecured server.",
			"             Use --port to set the unsecure port (default: 80).",
			"             Use --skip to skip creating the secure server.",
			"             Requires a self-signed certificate (ford mkcert)!",
			"             Requires sudo!",
			"   restart:  Restarts any running servers.",
			"      stop:  Stops any running servers.",
			"",
			"Ford project actions:",
			"    init:    Copies project resources from a template.",
			"             Use --force to overwrite existing resources.",
			"             Use --template to specify a new template.",
			"    update:  Updates external resources. Runs init first.",
			"             Use --skip to skip init resource before build.",
			"             Use --no-cache to skip using the Ford cache.",
			"             Use --update-cache to update resource in the cache.",
			"    build:   Builds the project. Runs update first.",
			"             Use --build to specify a different build manifest.",
			"             Use --skip to skip init and update before build.",
			"             Use --clean to make a fresh build directory.",
			"             Use --output to change build directory.",
			"             Use --no-cache to skip using the Ford cache.",
			"             Use --update-cache to update resource in the cache.",
			"    serve:   Runs a simple web server.",
			"             Use --port to specify the port (default: 80).",
			"             Requires sudo if port 80 is used!",
			"      ssl:   Runs a secure simple web server.",
			"             Requires a self-signed certificate (ford mkcert)!",
			"             Requires sudo!",
			"     host:   Adds project to the Ford central server.",
			"             Use --destination to override default hosting name.",
			"   unhost:   Removes project from the Ford central server.",
			"             Use --destination to override default hosting name.",
			"",
			"Manifets options:",
			"    embed:   Embeds all files into the index.html to make a one",
			"             page application. You can enable this by setting",
			"             'embed': true in manifest.json.",
			"    rawsrc:  Does not minify javascript files. You can enable ",
			"             this by setting 'rawsrc': true in manifest.json.",
	])
	parser = OptionParser(usage=desc)
	parser.add_option("-f", "--force", dest="force", action="store_true",
						default=False, help="Force overwrites.")
	parser.add_option("-s", "--skip", dest="skip", action="store_true",
						default=False, help="Builds without upgrading.")
	parser.add_option("-t", "--template", dest="template",
						help="The project template to use for init.")
	parser.add_option("-b", "--build", dest="build", default="./manifest.json",
						help="The manifst to use for building this project.")
	parser.add_option("-c", "--clean", dest="clean", action="store_true",
						default=False, help="Clear output dir before build.")
	parser.add_option("-o", "--output", dest="output", default="./output",
						help="The directory to output built files to.")
	parser.add_option("-e", "--embed", dest="embed", action="store_true",
						default=False, help="Embed into one index.html file.")
	parser.add_option("-r", "--rawsrc", dest="rawsrc", action="store_true",
						default=False, help="Do not minify javascript.")
	parser.add_option("--no-colors", dest="colorless", action="store_true",
						default=False, help="Hide colors.")
	parser.add_option("-p", "--port", dest="port", default="80",
						help="The port to use for non SSL serving.")
	parser.add_option("-n", "--no-cache", dest="fresh", action="store_true",
						default=False, help="Skip using the Ford cache.")
	parser.add_option("-u", "--update-cache", dest="bust", action="store_true",
						default=False, help="Update the Ford cache.")
	parser.add_option("-i", "--ignore-lock", dest="smash", action="store_true",
						default=False,
						help="Remove existing project lock. (Not recommended)")
	parser.add_option("-d", "--destination", dest="destination",
						help="Used to override default project server names.")
	return parser

def cleanup(code, proj):
	proj.unlock()
	exit(code)

def interrupted(action, directory, proj=None):
	# Attempt to exit cleanly on a termination. This script is only called
	# when the user interrupts a running script with ctrl+c
	cleanup(0, proj)

def main():
	opts, args = optparse().parse_args()
	action, directory = "help", "."

	argv[0] = basename(argv[0])
	cmd = " ".join(argv)

	if len(args) >= 2:
		action = args[0]
		d = args[1]
		if not isdir(d):
			mkdirp(d)
		chdir(d)
	elif len(args) == 1:
		action = args[0]

	utilities.USE_COLOR = not opts.colorless

	is_root = getuid() == 0
	if is_root:
		if action == "serve":
			host(opts.port, False, getcwd())
			exit(0)
		elif action == "ssl":
			host(443, False, getcwd())
			exit(0)
		elif action == "start":
			if srv_status(True):
				not_running(True)

			if opts.skip and not secure_port(int(opts.port)):
				fail_server_check()

			setting("hosted", True)
			print "Starting Ford servers..."
			if not opts.skip:
				setting("multihost", True)
				multihost(opts.port)
			else:
				setting("multihost", False)
				host(opts.port, True)
			exit(0)
		elif action == "stop":
			setting("hosted", False)
			setting("multihost", False)

			print "Stopping Ford servers..."
			stophost(None, ".ford.central-server")
			exit(1)
		elif action == "restart":
			if not srv_status(True):
				not_running()

			if not setting("multihost") and not secure_port(daemon_port()):
				fail_server_check()

			print "Restarting Ford servers..."

			port = stophost(None, ".ford.central-server")
			if setting("multihost"):
				multihost(port)
			else:
				host(port, True)

			exit(1)
		elif action == "status":
			srv_status()
			exit(1)
		else:
			print "Ford cannot be run as root!"
			exit(1)

	proj = None
	try:
		directory = abspath(directory)
		if action == "selfup":
			selfupdate()
			exit(0)
		elif action == "latest":
			selfupdate()
			upgrade(True)
			if not opts.skip:
				cdnimport(True)
			exit(0)
		elif action == "mkcert":
			makecert()
			exit(0)

		if action == "help":
			optparse().print_help()
			exit(0)
		elif action == "upgrade":
			upgrade(opts.force)
			if not opts.skip:
				cdnimport(opts.force)
			exit(0)
		elif action == "import":
			cdnimport(opts.force)
			exit(0)
		elif action == "start":
			if srv_status(True):
				not_running(True)
			if not opts.skip or secure_port(int(opts.port)):
				fail_sudo_server_check()
			setting("hosted", True)
			setting("multihost", False)
			print "Starting Ford servers..."
			host(opts.port, True)
			exit(0)
		elif action == "restart":
			if not srv_status(True):
				not_running()
			if setting("multihost"):
				fail_sudo_server_check()
			else:
				check_port()

			print "Restarting Ford servers..."
			port = stophost(None, ".ford.central-server")
			host(port, True)
			exit(0)
		elif action == "stop":
			if setting("multihost"):
				fail_sudo_server_check()
			else:
				check_port()
			setting("hosted", False)
			setting("multihost", False)
			print "Stopping Ford servers..."
			stophost(None, ".ford.central-server")
			exit(0)
		elif action == "status":
			if setting("multihost"):
				fail_sudo_server_check()
			else:
				check_port()
			srv_status()
			exit(0)
		elif action == "serve":
			check_port()
			host(opts.port, False)
			exit(0)
		elif action == "ssl":
			print "You are attempting to run a server on port 443."
			print "This requires permissions; please rerun with sudo!"
			exit(1)

		if not action in SUPPORTED_ACTIONS:
			print "action must be '{0}'; '{1}' is not supported".format(
				", ".join(SUPPORTED_ACTIONS), action)
			exit(0)

		proj = Project(directory, opts.build)

		did_lock, lock_text = proj.lock(getlogin(), getcwd(), cmd)
		if not did_lock and opts.smash:
			proj.unlock()
			did_lock, lock_text = proj.lock(getlogin(), getcwd(), cmd)

		if not did_lock:
			print "This project was locked!\n\n\t{0}".format(lock_text)
			print "\nEither a ford task is running or exited uncleanly."
			print "If this task is not currently running, remove the file:"
			utilities.printr("\n\t{0}".format(proj.lock_file), "red")
			print "\nAnd then run your command again."
			exit(1)


		if action in ["host", "unhost"]:
			if not proj.has_template():
				pe("exception", "not_project", proj.project_dir)
				cleanup(1, proj)
			elif action == "host":
				host_path = opts.destination
				if host_path is None:
					host_path = basename(getcwd())
				host_project(host_path, getcwd())
				cleanup(0, proj)
			elif action == "unhost":
				host_path = opts.destination
				if host_path is None:
					host_path = basename(getcwd())
				unhost_project(host_path, getcwd())
				cleanup(0, proj)

		if not proj.init(opts.template, opts.force, action == "init"):
			cleanup(1, proj)

		if action == "init":
			cleanup(1, proj)

		# Set the project caching options
		proj.from_cache = not opts.fresh
		proj.update_cache = opts.bust

		if action == "update":
			proj.update()
		else:
			proj.build(abspath(opts.output),
					opts.skip, opts.embed, opts.rawsrc, opts.clean)

		cleanup(0, proj)
	except (JSONError, UpdateError):
		cleanup(1, proj)
	except KeyboardInterrupt:
		interrupted(action, directory, proj)

if __name__ == "__main__":
	main()
